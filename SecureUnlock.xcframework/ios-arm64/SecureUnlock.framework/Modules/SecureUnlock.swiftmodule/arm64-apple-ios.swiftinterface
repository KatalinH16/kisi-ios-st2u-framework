// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SecureUnlock
import CommonCrypto
import CoreBluetooth
import CoreLocation
import CryptoKit
import Foundation
@_exported import SecureUnlock
import Security
import Swift
import _Concurrency
public enum SecureT2UError : Swift.Error {
  case invalidTransition
  case orgInvalidPayload
  case missingLogin
  case readerProofInvalidPayload
  case certificateInvalidPayload
  case failedToEncrypt
  case failedToDecrypt
  case scramFetchError
  case scramFetchDenied
  case scramFetchNoNetwork
  case failedToVerifyReaderProof
  case needsDeviceOwnerVerification
  case unexpectedCommand
  case missingDelegate
  case offsetReadOutOfBounds
  case unrecognizedEvent
  public static func == (a: SecureUnlock.SecureT2UError, b: SecureUnlock.SecureT2UError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.NSNotification.Name {
  public static var BeaconManagerDidEnterRegionNotification: Foundation.Notification.Name {
    get
  }
  public static var BeaconManagerDidExitRegionNotification: Foundation.Notification.Name {
    get
  }
}
@objc extension Foundation.NSNotification {
  @objc public static let BeaconManagerDidEnterRegionNotification: Foundation.Notification.Name
  @objc public static let BeaconManagerDidExitRegionNotification: Foundation.Notification.Name
}
public struct SecureUnlockLogger {
  public static var info: ((_ message: Swift.String, _ file: Swift.String, _ function: Swift.String) -> Swift.Void)?
  public static var error: ((_ message: Swift.String, _ file: Swift.String, _ function: Swift.String) -> Swift.Void)?
}
public struct Login {
  public var id: Swift.Int
  public var token: Swift.String
  public var key: Swift.String
  public var certificate: Swift.String
  public init(id: Swift.Int, token: Swift.String, key: Swift.String, certificate: Swift.String)
}
public struct BeaconLock : Swift.Identifiable, Swift.Equatable, Swift.Codable {
  public var id: Swift.Int
  public var oneTimePassword: Swift.Int
  public static func == (a: SecureUnlock.BeaconLock, b: SecureUnlock.BeaconLock) -> Swift.Bool
  public typealias ID = Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
final public class BeaconManager : ObjectiveC.NSObject {
  public static let shared: SecureUnlock.BeaconManager
  final public var enteredBeaconsLocks: [CoreLocation.CLBeaconRegion : [SecureUnlock.BeaconLock]] {
    get
  }
  @objc deinit
}
@available(iOS 13.0, *)
extension SecureUnlock.BeaconManager {
  final public func startMonitoring()
  final public func stopMonitoring()
  final public func startRanging()
  final public func stopRanging()
  final public func isNearbyLock(_ id: Swift.Int) -> Swift.Bool
  final public func timeBasedOneTimePasswordForLock(_ id: Swift.Int) -> Swift.Int?
}
@available(iOS 13.0, *)
extension SecureUnlock.BeaconManager : CoreLocation.CLLocationManagerDelegate {
  @objc final public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @objc final public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: Swift.Error)
  @objc final public func locationManager(_ manager: CoreLocation.CLLocationManager, didStartMonitoringFor region: CoreLocation.CLRegion)
  @objc final public func locationManager(_ manager: CoreLocation.CLLocationManager, monitoringDidFailFor region: CoreLocation.CLRegion?, withError error: Swift.Error)
  @objc final public func locationManager(_ manager: CoreLocation.CLLocationManager, didEnterRegion region: CoreLocation.CLRegion)
  @objc final public func locationManager(_ manager: CoreLocation.CLLocationManager, didExitRegion region: CoreLocation.CLRegion)
  @objc final public func locationManager(_ manager: CoreLocation.CLLocationManager, didRangeBeacons beacons: [CoreLocation.CLBeacon], in region: CoreLocation.CLBeaconRegion)
  @objc final public func locationManager(_ manager: CoreLocation.CLLocationManager, rangingBeaconsDidFailFor region: CoreLocation.CLBeaconRegion, withError error: Swift.Error)
}
@objc @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
final public class SecureUnlockManager : ObjectiveC.NSObject {
  @objc public static let shared: SecureUnlock.SecureUnlockManager
  weak final public var delegate: SecureUnlock.SecureUnlockDelegate? {
    get
    set
  }
  @objc final public func start()
  @objc final public func stop()
  @objc deinit
}
@available(iOS 13.0, *)
extension SecureUnlock.SecureUnlockManager : CoreBluetooth.CBPeripheralManagerDelegate {
  @objc final public func peripheralManagerDidUpdateState(_ peripheral: CoreBluetooth.CBPeripheralManager)
  @objc final public func peripheralManager(_ peripheral: CoreBluetooth.CBPeripheralManager, didReceiveRead request: CoreBluetooth.CBATTRequest)
  @objc final public func peripheralManager(_ peripheral: CoreBluetooth.CBPeripheralManager, didReceiveWrite requests: [CoreBluetooth.CBATTRequest])
  @objc final public func peripheralManager(_ peripheral: CoreBluetooth.CBPeripheralManager, didAdd service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc final public func peripheralManagerDidStartAdvertising(_ peripheral: CoreBluetooth.CBPeripheralManager, error: Swift.Error?)
  @objc final public func peripheralManager(_ peripheral: CoreBluetooth.CBPeripheralManager, willRestoreState dict: [Swift.String : Any])
}
public protocol SecureUnlockDelegate : AnyObject {
  func secureUnlockSuccess(online: Swift.Bool, duration: Foundation.TimeInterval)
  func secureUnlockFailure(error: SecureUnlock.SecureT2UError, duration: Foundation.TimeInterval)
  func secureUnlockClientID() -> Swift.Int
  func secureUnlockLoginForOrganization(_ organization: Swift.Int?) -> SecureUnlock.Login?
}
extension SecureUnlock.SecureT2UError : Swift.Equatable {}
extension SecureUnlock.SecureT2UError : Swift.Hashable {}
